unit Financeiro.Model.AlterarUsuariosDb;

interface

uses
  Financeiro.Controller.Interfaces, vcl.Dialogs;

type
  TAlterarCadastro = class(TInterfacedObject, iValidacao)
    constructor Create;
    Destructor Destroy; override;
    class Function New: iValidacao;

  public
    function ValidarParametros(Nome, Login,SenhaEdit, SenhaDb, 
      SenhaNova: string): iValidacao;
    function ValidarSenhaAtual(SenhaEdit, SenhaDb: string)
      : iValidacao;
    function ValidarNome(Nome: string): iValidacao;
    function ValidarLogin(Login: string): iValidacao;
    function ValidarSenhaNova(SenhaNova: string): iValidacao;

  end;

implementation

uses
  System.SysUtils;

{ TAlterarCadastro }

constructor TAlterarCadastro.Create;
begin
  //
end;

destructor TAlterarCadastro.Destroy;
begin

  inherited;
end;

class function TAlterarCadastro.New: iValidacao;
begin
  result := Self.Create;
end;

function TAlterarCadastro.ValidarParametros(Nome, Login,SenhaEdit, SenhaDb, 
      SenhaNova: string): iValidacao;
begin
  ValidarNome(Nome);
  ValidarLogin(Login);
  ValidarSenhaAtual(SenhaEdit, SenhaDb);
  ValidarSenhaNova(SenhaNova);
end;

function TAlterarCadastro.ValidarSenhaAtual(SenhaEdit, SenhaDb: string)
  : iValidacao;
begin
  if SenhaEdit <> SenhaDb then
  begin
    ShowMessage('Senha Invalida!');
    Abort
  end;
end;

function TAlterarCadastro.ValidarNome(Nome: string): iValidacao;
begin
  if Trim(Nome) = '' then
  begin
    ShowMessage('O Campo Nome não pode ser vazio!');
    Abort;
  end;
end;

function TAlterarCadastro.ValidarLogin(Login: string): iValidacao;
begin
  if Trim(Login) = '' then
  begin
    ShowMessage('O campo de login não pode ser vazio!');
    Abort
  end;
end;

function TAlterarCadastro.ValidarSenhaNova(SenhaNova: string)
  : iValidacao;
begin
  if Trim(SenhaNova) = '' then
  begin
    ShowMessage('Senha Nova Invalida!');
    Abort
  end;
end;

end.
